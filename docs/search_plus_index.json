{"./":{"url":"./","title":"はじめに","keywords":"","body":"コストも時間も削減？！RSpec for Rails × AWS Codebuildで業務で使える 自動テストを体験しよう！ "},"Section_1.html":{"url":"Section_1.html","title":"1.本日のミートアップの内容","keywords":"","body":"本日のミートアップの内容 1.本日のゴール RSpecでできること・できないことが分かる。 現場で使えるRSpecの使い方が分かる。 RSpecを使うメリットとデメリットが分かるようになる。 2.本日お話しすること Rspecの概要解説 RSpecでの単体・結合・統合テスト > AWS CodeBuildでビルド実行する 3.本日のミートアップ対象者 RSpecの導入を検討している人 Railsで開発してるが、Rpsecを書いたことない人 Railsで開発してるが、Rpsecをこれから利用する人(開発経験2年目~5年目) 4.留意事項 xxxxx xxxxx "},"Section_2.html":{"url":"Section_2.html","title":"2.RSpecの概要解説","keywords":"","body":"RSpecの概要解説 本クションで行うこと RSpecとは何か RSpecのメリット・デメリット RSpecでできること RSpecとは？ 突然ですが、皆さんの開発現場ではテストはどのように実施されてますか？ 私が経験した現場では、いろいろなテストの形がありました。動作確認程度のテスト、エクセルでエビデンスのキャプチャをとるレガシーなテスト、テストコードを利用したテスト、、、、、など現場によって様々です。 今回はRuby on Railsでの自動テストについて話していきます。 RSpecは、Ruby on Railsのテストフレームワークになります。RSpecを使うことで、テストコードによる自動テストができるようになります。 RSpecのメリット・デメリット メリット デメリット "},"Section_3.html":{"url":"Section_3.html","title":"3.単体テスト","keywords":"","body":"単体テスト 本クションで行うこと 1. "},"Section_4.html":{"url":"Section_4.html","title":"4.結合テスト","keywords":"","body":"結合テスト 本クションで行うこと 1. "},"Section_5.html":{"url":"Section_5.html","title":"5.統合テスト","keywords":"","body":"統合テスト 本クションで行うこと 1. "},"Section_6.html":{"url":"Section_6.html","title":"6.AWS CodeBuildでビルドを実行しみよう！","keywords":"","body":"6. AWS CodeBuildでテスト＆ビルドする 本セクションで行うこと AWS CodeBuildの解説 ビルドプロジェクトを作成する CodeBuildでビルドを実行する AWS CodeBuildの解説 AWSで提供されているクラウドサーバー上で、プロジェクトのテストとビルドができるサービス。 Rubyの他にJava、Go, pythonなどに対応。 また、他のサービス（AWS CodeCommitやCodeDeploy）と組み合わせて利用することも可能。 AWS CodeBuildの仕組み AWS CodeBuildは、「ビルドプロジェクト」を元にビルドを行う。 ビルドプロジェクト・・・ソースコードの指定やビルド環境の指定などビルドに関わる情報のこと。AWSコンソールから作成できる。 AWS CodeBuildの処理の流れ AWSコンソールからCodeBuildを実行すると、以下の流れでビルドが行われる。 ビルドプロジェクトに基づきビルド環境を作成 ビルド環境で、ソースコードをダウンロード後、buildspec.ymlで設定したコマンドを実行してソースのコンパイル・テスト・ビルドを行う。 ビルド出力がある場合は、S3にデプロイ可能なアーティファクトをアップロードされる。 １〜３のログは、AWS CloudWatch Logsに送信される。 buildspec.yml ビルド環境で実行するコマンドなどを記載するyaml形式のファイル。 version: 0.2 ・・・buildspecのバージョンを指定（最新の0.2を使用） phases: install: ・・・インストールの段階で実行するコマンドを設定する。主にビルド環境で使用するパッケージのインストールなどに使用。 runtime-versions: docker: 19 ・・・ 今回はdockerを使用しているのでdockerのバージョン19を指定（※１）。 commands: pre_build: ・・・・ビルドの前に実行するコマンドを設定する。主にnpmパッケージのインストールやgemのインストールなどに使用。 - echo PRE_BUILD Start - docker-compose -f docker_compose_test.yml build ・・・　dockerをビルドする。 build: ・・・ビルド時に実行するコマンドを設定する。主にテストを行う。 commands: - echo BUILD start - docker-compose -f docker_compose_test.yml up -d - docker-compose -f docker_compose_test.yml run app bundle exec rake spec ・・・テストを実行する。 ※１バージョンはこちらを参照 ビルドプロジェクトを設定する 実際の現場では、テスト環境用のDBが用意されていることがあると思います。Codebuildは、VPC内に設置することも可能です。同じVPC内にRDSを設置することでCodeBuildからRDSに接続してテストを実行することができます。今回は実際の現場で使えそうな利用方法として、テスト用のRDSに接続してビルドを実行したいと思います。 今回使用するAWSのアーキテクトの確認 ポイント VPCのパブリックサブネットにはNatGatewayを設置し、インターネット接続を可能にしておく CodeBuildとRDSはプライベートサブネットに設置する RDSのセキュリティグループに、CodeBuildに設定しいるセキュリティグループからのアクセスを追加する。（この設定によってCodeBuildはRDSに接続可能になる） ビルドプロジェクトの作成 ビルドプロジェクトでVPCを指定する必要があるので、事前にVPC・サブネット・RDSを作成しておきましょう。AWS Codebuildのビルドプロジェクトの作成画面です。 プロジェクト名・・・ プロジェクト名を指定する（今回はmirameetVol28) ソースプロバイダ・・・GitHubやBitbucketなど　ソース共有ツールを指定する（今回はGitHub) リポジトリ・・・ソースのリポジトリの種別（PublicリポジトリかPrivateリポジトリか）を選択（今回のmirameetVol28はパブリックリポジトリ） GitHubリポジトリ・・・対象のリポジトリを選択 環境イメージ・・・AWSの用意している環境かDockerを指定する オペレーティングシステム・・・OSを指定する（今回は、Ubuntu) ランタイム・・・ランタイムを選択（Standardを選択） イメージ・・・イメージを選択(aws/codebuild/standard:4.0) 特権付与・・・docker-composeでビルドする際はtチェックを入れる VPC・・・事前に作成したVPCを選択 サブネット・・・プライベートサブネットを選択 セキュリティグループ・・・CodeBuild用のセキュリティグループを選択 環境変数・・・環境変数を設定（ビルド環境に設定される） ビルド仕様・・・ビルドコマンドの設定（今回はBuildspecファイルを使用する） 最後に、ビルドプロジェクトを作成するをクリックして作成します！ CodeBuildでビルドを実行する ビルドプロジェクト一覧から、プロジェクをクリック 「ビルドを開始」ボタンをクリック ビルドには、５分ほどかかります。 "}}