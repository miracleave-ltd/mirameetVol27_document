{"./":{"url":"./","title":"はじめに","keywords":"","body":"コストも時間も削減？！RSpec for Rails × AWS Codebuildで業務で使える 自動テストを体験しよう！ "},"Section_1.html":{"url":"Section_1.html","title":"1.本日のミートアップの内容","keywords":"","body":"本日のミートアップの内容 本日のゴール RSpecでできること・できないことが分かる。 現場で使えるRSpecの使い方が分かる。 RSpecを使うメリットとデメリットが分かるようになる。 本日お話しすること Rspecの概要解説 RSpecでの単体・結合・統合テスト > AWS CodeBuildでビルド実行する 本日のミートアップ対象者 RSpecの導入を検討している人 Railsで開発してるが、Rpsecを書いたことない人 Railsで開発してるが、Rpsecをこれから利用する人(開発経験2年目~5年目) 留意事項 xxxxx xxxxx "},"Section_2.html":{"url":"Section_2.html","title":"2.RSpecの概要解説","keywords":"","body":"RSpecの概要解説 本クションで行うこと RSpecとは何か RSpecのメリット・デメリット RSpecでできること RSpecとは？ 突然ですが、皆さんの開発現場ではテストはどのように実施されてますか？ 私が経験した現場では、色々なテストの形がありました。動作確認≒テストになっている、エクセルにエビデンスのキャプチャを張って行うレガシーなテスト、テストコードを書いて行う自動テスト、、、、、など現場によって様々です。 公式ドキュメントよりRSpecについて下記のように説明されています。 RSpec is a Behaviour-Driven Development tool for Ruby programmers. BDD is an approach to software development that combines Test-Driven Development, Domain Driven Design, and Acceptance Test-Driven Planning. RSpec helps you do the TDD part of that equation, focusing on the documentation and design aspects of TDD. 一言で言うと、RSpecは、（Rubyプログラマー為の）BDDツールである。 BDD・・・振る舞い駆動開発(Behaviour-Driven Development)のこと。TDD（テスト駆動開発）から派生した開発手法。BDDでは実装前に要求される振る舞い(≒仕様)をテストに書き出してから実装し、また、要求される振る舞いは自然言語(英語など)に近い形で表現されます。 RailsプロジェクトでRSpecを利用するには「rspec-rails」というライブラリ（gem）のインストールが必要になります。 RSpecのメリット・デメリット RSpecを導入することで、以下のようなメリットがあります。 メリット テストのコストが抑えられる例）エクセルにテスト仕様書を書き出す場合、、、 RSpecを利用すると、テスト実施はRSpecが行う 誰がやっても同じテストが実施される為、テストのQAが安定する テスト実施や仕様書の工数を削減できる（中長期なメリット）一度テストコードを書くと、その後の追加開発時で既存プログラムへのテスト工数が以下のように削減できる 追加開発時のデグレ発生を防止できる（中長期なメリット） デメリット RSpecの学習コストが必要 開発時にテストコードも書くので、開発自体の工数が増加する RSpecでできること 単体テストができる 結合テストができる 統合テストができる "},"Section_3.html":{"url":"Section_3.html","title":"3.単体テスト(UT)","keywords":"","body":"単体テスト 本セクションで行うこと RSpecの導入方法 Modelの単体テストの実装 APIの単体テスト 1. RSpecの導入方法 まずはRSpecをinstallしていきます。Gemfileに追加します。 Gemfile group :development, :test do # 省略 gem 'rspec-rails' #←追加 end Gemfileにgem 'rspec-rails'を追加したらbundle installしていきます。 ターミナル bundle install 終了したら、ジェネレーターを使用してRSpecのinstallを完了させます。 ターミナル rails g rspec:install 下記のようにディレクトリ・ファイルが作成されれば完了です。 create .rspec create spec create spec/spec_helper.rb create spec/rails_helper.rb ※RSpecの設定は各種ありますが、今回は割愛します。 2. Modelの単体テストの実装 モデルスペックの観点 有効な属性で初期化した場合、モデルが有効であることを検証する。 無効な属性で初期化した場合、モデルが有効ではないことを検証する。 クラスメソッドとインスタンスメソッドが定義されている場合は期待通りに動作すること。 ファイルの作成 ターミナル rails g rspec:model user spec/models/user_spec.rbというファイルが作成されていればOKです。 Userモデルの要件 require 'rails_helper' RSpec.describe User, type: :model do # 有効な属性の場合のテスト it \"nickname, email, password, password_confirmationがあれば有効であること\" # アソシエーションのテスト it \"postモデルとのアソシエーションが有効であること\" it \"commentモデルとのアソシエーションが有効であること\" # 各属性の有効・無効の場合のテスト it \"nicknameがnilの場合、無効であること\" it \"nicknameが空文字の場合、無効であること\" it \"nicknameが10文字以内の場合、有効であること\" it \"nicknameが11文字以上の場合、無効であること\" it \"emailがnilの場合、無効であること\" it \"emailが空文字の場合、無効であること\" it \"emailが既に保存されている場合、無効であること\" it \"emailがemailの形式ではない場合、無効な状態であること\" it \"emailは全角文字を使用する場合、無効な状態であること\" do it \"passwordがnilの場合、無効であること\" it \"passwordが空文字の場合、無効であること\" it \"passwordが5文字以内の場合、無効であること\" it \"passwordが6文字以上の場合、有効であること\" it \"passwordが128文字以内の場合、有効であること\" it \"passwordが129文字以上の場合、無効であること\" it \"password_confirmationがnilの場合、無効であること\" it \"password_confirmationが空文字の場合、無効であること\" it \"passwordとpassword_confirmationが不一致の場合、無効であること\" end describe 期待する結果をまとめる。上記では descrive Userとしていて、これがUserモデルのテストであると明示している。 it 実際のテストを実行するexampleを定義している。基本的にexample一つにつき一つの結果を期待する。 exampleは明示的に記載する。省略することもできるが、可読性が落ちるため、基本的には記述する。 exampleの説明は動詞で始まる。例えば、nicknameがnilの場合、無効であることを英語に置き換えるとis Invalid if nickname is nilとなる。 exampleを書く it '~' do end 実装 テストデータの作成方法(Factorybot、Fackerの導入) DRYに書く(before, subject, letなど) 外部APIテスト vcrの使用方法 "},"Section_4.html":{"url":"Section_4.html","title":"4.結合テスト(IT)","keywords":"","body":"結合テスト（IT） 本クションで行うこと 今回取り上げる結合テストについて RequestSpecの解説 本アプリでの実例紹介（後で変更するかも） 今回取り上げる結合テストについて 結合テストは、Integration Test(統合テスト)とも呼ばれ、システム開発において単体レベルで開発した機能が組み合わさって動作した時、期待される動作をするかどうかをテストします結合テストは、実施する対象によって内部結合・外部結合に分かれます 内部結合・・・ システム内部の機能同士を組み合わせてテストを行う外部結合・・・ システム内部の機能とシステム外部の機能を組み合わせてテストを行う 今回取り上げる結合テストは「内部結合」になります RequestSpecの解説 "},"Section_5.html":{"url":"Section_5.html","title":"5.統合テスト(ST)","keywords":"","body":"統合テスト 本クションで行うこと 1. "},"Section_6.html":{"url":"Section_6.html","title":"6.AWS CodeBuildでビルドを実行しみよう！","keywords":"","body":"6. AWS CodeBuildでテスト＆ビルドする 本セクションで行うこと AWS CodeBuildの解説 ビルドプロジェクトを作成する CodeBuildでビルドを実行する AWS CodeBuildの解説 AWSで提供されているクラウドサーバー上で、プロジェクトのテストとビルドができるサービス。 Rubyの他にJava、Go, pythonなどに対応。 また、他のサービス（AWS CodeCommitやCodeDeploy）と組み合わせて利用することも可能。 AWS CodeBuildの仕組み AWS CodeBuildは、「ビルドプロジェクト」を元にビルドを行う。 ビルドプロジェクト・・・ソースコードの指定やビルド環境の指定などビルドに関わる情報のこと。AWSコンソールから作成できる。 AWS CodeBuildの処理の流れ AWSコンソールからCodeBuildを実行すると、以下の流れでビルドが行われる。 ビルドプロジェクトに基づきビルド環境を作成 ビルド環境で、ソースコードをダウンロード後、buildspec.ymlで設定したコマンドを実行してソースのコンパイル・テスト・ビルドを行う。 ビルド出力がある場合は、S3にデプロイ可能なアーティファクトをアップロードされる。 １〜３のログは、AWS CloudWatch Logsに送信される。 buildspec.yml ビルド環境で実行するコマンドなどを記載するyaml形式のファイル。 version: 0.2 ・・・buildspecのバージョンを指定（最新の0.2を使用） phases: install: ・・・インストールの段階で実行するコマンドを設定する。主にビルド環境で使用するパッケージのインストールなどに使用。 runtime-versions: docker: 19 ・・・ 今回はdockerを使用しているのでdockerのバージョン19を指定（※１）。 commands: pre_build: ・・・・ビルドの前に実行するコマンドを設定する。主にnpmパッケージのインストールやgemのインストールなどに使用。 - echo PRE_BUILD Start - docker-compose -f docker_compose_test.yml build ・・・　dockerをビルドする。 build: ・・・ビルド時に実行するコマンドを設定する。主にテストを行う。 commands: - echo BUILD start - docker-compose -f docker_compose_test.yml up -d - docker-compose -f docker_compose_test.yml run app bundle exec rake spec ・・・テストを実行する。 ※１バージョンはこちらを参照 ビルドプロジェクトを設定する 実際の現場では、テスト環境用のDBが用意されていることがあると思います。Codebuildは、VPC内に設置することも可能です。同じVPC内にRDSを設置することでCodeBuildからRDSに接続してテストを実行することができます。今回は実際の現場で使えそうな利用方法として、テスト用のRDSに接続してビルドを実行したいと思います。 今回使用するAWSのアーキテクトの確認 ポイント VPCのパブリックサブネットにはNatGatewayを設置し、インターネット接続を可能にしておく CodeBuildとRDSはプライベートサブネットに設置する RDSのセキュリティグループに、CodeBuildに設定しいるセキュリティグループからのアクセスを追加する。（この設定によってCodeBuildはRDSに接続可能になる） ビルドプロジェクトの作成 ビルドプロジェクトでVPCを指定する必要があるので、事前にVPC・サブネット・RDSを作成しておきましょう。AWS Codebuildのビルドプロジェクトの作成画面です。 プロジェクト名・・・ プロジェクト名を指定する（今回はmirameetVol28) ソースプロバイダ・・・GitHubやBitbucketなど　ソース共有ツールを指定する（今回はGitHub) リポジトリ・・・ソースのリポジトリの種別（PublicリポジトリかPrivateリポジトリか）を選択（今回のmirameetVol28はパブリックリポジトリ） GitHubリポジトリ・・・対象のリポジトリを選択 環境イメージ・・・AWSの用意している環境かDockerを指定する オペレーティングシステム・・・OSを指定する（今回は、Ubuntu) ランタイム・・・ランタイムを選択（Standardを選択） イメージ・・・イメージを選択(aws/codebuild/standard:4.0) 特権付与・・・docker-composeでビルドする際はtチェックを入れる VPC・・・事前に作成したVPCを選択 サブネット・・・プライベートサブネットを選択 セキュリティグループ・・・CodeBuild用のセキュリティグループを選択 環境変数・・・環境変数を設定（ビルド環境に設定される） ビルド仕様・・・ビルドコマンドの設定（今回はBuildspecファイルを使用する） 最後に、ビルドプロジェクトを作成するをクリックして作成します！ CodeBuildでビルドを実行する ビルドプロジェクト一覧から、プロジェクをクリック 「ビルドを開始」ボタンをクリック ビルドには、５分ほどかかります。 "}}